#include <fstream>
#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
// Comments 
// some importent Comments
// Todella tarkeaa mielipide 

class Domain {
public:
    // Конструктор, позволяющий конструировать объект из строки
    explicit Domain(const std::string& str) : domain_str(str) {}

    // Перегруженный оператор сравнения для сравнения двух доменов
    bool operator==(const Domain& other) const {
        return domain_str == other.domain_str;
    }
    
    // Перегруженный оператор сравнения для сравнения двух доменов
    bool operator>(const Domain& other) const {
        return domain_str > other.domain_str;
    }
    
    // Перегруженный оператор сравнения для сравнения двух доменов
    bool operator<(const Domain& other) const {
        return domain_str < other.domain_str;
    }

    // Метод для проверки, является ли данный домен поддоменом другого домена
    bool IsSubdomain(const Domain& other) const {
        // Проверяем, что текущий домен является поддоменом другого домена
        return domain_str.length() > other.domain_str.length() &&
               domain_str.compare(0, other.domain_str.length(), other.domain_str) == 0;
    }

    // Вспомогательный метод для получения строкового представления домена
    std::string ToString() const {
        return domain_str;
    }

private:
    std::string domain_str;
};

class DomainChecker {
public:
    static bool IsEqualDomain (const Domain& domain1, const Domain& domain2) {
      return (domain1 == domain2 || domain2.IsSubdomain(domain1));
    }

    // Конструктор, принимающий список запрещённых доменов
    DomainChecker(std::vector<Domain>::const_iterator begin, std::vector<Domain>::const_iterator end) : forbidden_domains_(begin, end)  {
            std::sort(forbidden_domains_.begin(), forbidden_domains_.end());
            auto it = std::unique (forbidden_domains_.begin(), forbidden_domains_.end(), IsEqualDomain);
            size_t new_len = std::distance(forbidden_domains_.begin(),it);
            //forbidden_domains_.resize( new_len );
            forbidden_domains_2.assign(forbidden_domains_.begin(), forbidden_domains_.begin() + new_len);
            std::ofstream fout("1.txt");
            for(auto x: forbidden_domains_2)
                fout<<x.ToString()<<std::endl;
                  
    }
        
    //static bool comp (const Domain& forbidden_domain, const Domain& domain) { return (domain == forbidden_domain || domain.IsSubdomain(forbidden_domain)); }
    
    // Метод для проверки, является ли домен запрещённым
    bool IsForbidden(const Domain& domain) const {
        int low = 0, high = forbidden_domains_2.size()-1;
        std::string last;
        while (low <= high) { 
            int mid = low + (high - low) / 2; 
            //std::cout<<"* "<<domain.ToString()<<std::endl;
            //std::cout<<"** "<<forbidden_domains_[mid].ToString()<<std::endl;
            if (domain == forbidden_domains_2[mid] || domain.IsSubdomain(forbidden_domains_2[mid])) 
                return true; 
            if (domain > forbidden_domains_2[mid]) 
                low = mid + 1; 
            else
                high = mid - 1; 
            last = forbidden_domains_2[mid].ToString();
        } 
        //std::cout<<"* "<<domain.ToString()<<std::endl;
        //std::cout<<"** "<<last<<std::endl;
        return false; 
    } 

private:
    std::vector<Domain> forbidden_domains_;
    std::vector<Domain> forbidden_domains_2;
};

// Функция для чтения доменов из входного потока
std::vector<Domain> ReadDomains(std::istream& input, size_t count) {
    std::vector<Domain> domains;
    for (size_t i = 0; i < count; ++i) {
        std::string domain_str;
        std::getline(input, domain_str);
        domain_str = "." + domain_str;
        std::reverse(domain_str.begin(), domain_str.end());
        domains.emplace_back(domain_str);
    }
    return domains;
}
template <typename Number>
Number ReadNumberOnLine(std::istream& input) {
    std::string line;
    getline(input, line);

    Number num;
    std::istringstream(line) >> num;

    return num;
}

int main() {
    const std::vector<Domain> forbidden_domains = ReadDomains(std::cin, ReadNumberOnLine<size_t>(std::cin));
    DomainChecker checker(forbidden_domains.begin(), forbidden_domains.end());

    const std::vector<Domain> test_domains = ReadDomains(std::cin, ReadNumberOnLine<size_t>(std::cin));
    for (const Domain& domain : test_domains) {
        std::cout << (checker.IsForbidden(domain) ? "Bad" : "Good") << std::endl;
    }
}